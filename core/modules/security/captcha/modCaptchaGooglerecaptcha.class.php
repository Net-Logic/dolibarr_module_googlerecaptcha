<?php
/* Copyright (C) 2006-2011  Laurent Destailleur     <eldy@users.sourceforge.net>
 * Copyright (C) 2024		Frédéric France			<frederic.france@free.fr>
 * Copyright (C) 2024		MDW						<mdeweerd@users.noreply.github.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 * or see https://www.gnu.org/
 */

/**
 *      \file       htdocs/core/modules/security/captcha/modCaptchaEasytooltip.class.php
 *      \ingroup    core
 *		\brief      File to manage captcha generation according to dolibarr native code
 */

require_once DOL_DOCUMENT_ROOT . '/core/modules/security/captcha/modules_captcha.php';
require_once DOL_DOCUMENT_ROOT . '/core/modules/security/generate/modGeneratePassStandard.class.php';

// phpcs:disable
/**
 *	Class to generate a password according to a dolibarr standard rule (12 random chars)
 */
class modCaptchaGooglerecaptcha extends ModeleCaptcha
{
	// phpcs:enable
	/**
	 * @var string ID
	 */
	public $id;

	/**
	 * @var string
	 */
	public $picto = 'fa-shield-alt';

	/**
	 *	Constructor
	 *
	 *  @param		DoliDB		$db			Database handler
	 *	@param		Conf		$conf		Handler de conf
	 *	@param		Translate	$langs		Handler de langue
	 *	@param		User		$user		Handler du user connected
	 */
	public function __construct($db, $conf, $langs, $user)
	{
		$this->id = strtolower(preg_replace('/^modCaptcha/i', '', get_class($this)));

		$this->db = $db;
		$this->conf = $conf;
		$this->langs = $langs;
		$this->user = $user;
		$this->langs->load('easytooltip@easytooltip');
	}

	/**
	 *		Return description of module
	 *
	 *      @return     string      Description of module
	 */
	public function getDescription()
	{
		global $langs;
		return $langs->trans("DolibarrEasytooltipCaptcha");
	}

	/**
	 * 		Return an example of password generated by this module
	 *
	 *      @return     string      Example of password
	 */
	public function getExample()
	{
		global $db, $langs, $user;

		$out = '<script src="https://www.google.com/recaptcha/api.js?render=' . getDolGlobalString('GOOGLERECAPTCHA_SITE_KEY') . '"></script>';
		$out .= "<script>\n";
		$out .= "$('#login').submit(function() {\n";
		$out .= "    // we stoped it\n";
		$out .= "    event.preventDefault();\n";
		$out .= "    console.log('try login...');\n";
		$out .= "    grecaptcha.ready(function() {\n";
		$out .= "        grecaptcha.execute('" . getDolGlobalString('GOOGLERECAPTCHA_SITE_KEY') . "', {action: 'login'}).then(function(token) {\n";
		$out .= "            // add token to form\n";
		$out .= "            $('#login').prepend('<input type=\"hidden\" name=\"g-recaptcha-response\" value=\"' + token + '\">');\n";
		$out .= "            $('#login').unbind('submit').submit();\n";
		$out .= "        });\n";
		$out .= "    });\n";
		$out .= "});\n";
		$out .= "</script>\n";

		return $out;
	}

	/**
	 * 	Return the HTML content to output on a form that need the captcha
	 *
	 *  @param		string	$php_self	An URL for the a href link
	 *  @return     string				The HTML code to output
	 */
	public function getCaptchaCodeForForm($php_self = '')
	{
		global $langs;

		$out = '<script src="https://www.google.com/recaptcha/api.js?render=' . getDolGlobalString('GOOGLERECAPTCHA_SITE_KEY') . '"></script>';
		$out .= "<script>\n";
		$out .= "$('#login').submit(function() {\n";
		$out .= "    // we stoped it\n";
		$out .= "    event.preventDefault();\n";
		$out .= "    console.log('try login...');\n";
		$out .= "    grecaptcha.ready(function() {\n";
		$out .= "        grecaptcha.execute('" . getDolGlobalString('GOOGLERECAPTCHA_SITE_KEY') . "', {action: 'login'}).then(function(token) {\n";
		$out .= "            // add token to form\n";
		$out .= "            $('#login').prepend('<input type=\"hidden\" name=\"g-recaptcha-response\" value=\"' + token + '\">');\n";
		$out .= "            $('#login').unbind('submit').submit();\n";
		$out .= "        });\n";
		$out .= "    });\n";
		$out .= "});\n";
		$out .= "</script>\n";

		return $out;
	}



	/**
	 * 	Validate a captcha
	 * 	This function is called after a log to validate a captcha, before validating a password.
	 *
	 *  @return     int					0 if KO, >0 if OK
	 */
	public function validateCodeAfterLoginSubmit()
	{

		$captcha = GETPOST('g-recaptcha-response', 'san_alpha');
		// $ip = $_SERVER['REMOTE_ADDR'];

		// post request to server
		$url = 'https://www.google.com/recaptcha/api/siteverify';
		$data = [
			'secret' => getDolGlobalString('GOOGLERECAPTCHA_SERVER_KEY'),
			'response' => $captcha,
		];
		$options = [
			'http' => [
				'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
				'method'  => 'POST',
				'content' => http_build_query($data),
			]
		];
		$context  = stream_context_create($options);
		$response = file_get_contents($url, false, $context);
		$responseKeys = json_decode($response, true);
		// {
		//     "success": true|false,      // whether this request was a valid reCAPTCHA token for your site
		//     "score": number             // the score for this request (0.0 - 1.0)
		//     "action": string            // the action name for this request (important to verify)
		//     "challenge_ts": timestamp,  // timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)
		//     "hostname": string,         // the hostname of the site where the reCAPTCHA was solved
		//     "error-codes": [...]        // optional
		// }
		if ($responseKeys['success'] === true && (float) $responseKeys['score'] > 0.7 && $responseKeys['action'] == 'login') {
			// Now the user is authenticated
			// setEventMessage('Score recaptcha '. (string) $responseKeys['score']);
			return 1;
		}

		return 0;
	}
}
